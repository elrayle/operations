# This workflow will build a docker image, push it to ghcr.io.  It returns the docker image name and tag.
name: Build docker image for Azure app

on:
  workflow_call:
    secrets: 
      DEPLOY_TOKEN:
        description: 'Token that is used to determine if the deployment is allowed - Defined in org action secrets'
        required: true
      PRODUCTION_DEPLOYERS:
        description: 'Name of the team that defines who can deploy to production - Defined in org action secrets'
        required: true

    inputs:
      deploy-env:
        description: 'environment to deploy (i.e. dev | prod) - used as a label for the Docker image'
        required: true
        type: string
      application-type:
        description: 'application type (i.e. api | worker | ui) - used as a label for the Docker image'
        required: true
        type: string
      image-tag:
        description: 'the tag to use for the image (e.g. prod: v1.2.0, dev: v1.2.0+dev:1D3F567890)'
        required: true
        type: string
      
    outputs:
      docker-image-name-with-tag: 
        value: ${{ jobs.determine-image-name.outputs.docker-image-name-with-tag }}

jobs:
  check-deployable:
    uses: elrayle/operations/.github/workflows/app-is-deployable.yml@main
    with:
      deploy-env: ${{ inputs.deploy-env }}
    secrets:
      DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      PRODUCTION_DEPLOYERS: ${{ secrets.PRODUCTION_DEPLOYERS }}

  determine-image-name:
    name: Determine Image Name
    runs-on: ubuntu-latest
    outputs:
      docker-image-name-with-tag: ${{ env.DOCKER_IMAGE_NAME_WITH_TAG }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4.1.1
        with:
          repository: 'elrayle/operations'
          ref: 'main'
          path: 'operations'
      - name: Determine Docker Image Name
        id: determine_image_name
        run: |
          script_log=$(./operations/scripts/app-workflows/determine-image-name.sh \
            ${{ github.repository }} \
            ${{ inputs.deploy-env }} \
            ${{ inputs.image-tag }}) || (echo "$script_log" && exit 1)
          echo -e "---- script log\n$script_log\n----"; \
          image_name=$(echo "$script_log" | tail -n 1)
          echo "DOCKER_IMAGE_NAME_WITH_TAG=$image_name" >> $GITHUB_ENV

  build-docker-image:
    name: Build Image
    runs-on: ubuntu-latest
    needs: [check-deployable, determine-image-name]
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Log into ghcr registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # user that kicked off the action
          password: ${{ secrets.GITHUB_TOKEN }} # token created when the action launched (short lived)

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.2.0
        with:
          context: .
          push: true
          file: Dockerfile
          tags: ${{ needs.determine-image-name.outputs.docker-image-name-with-tag }}
          labels: |
            env=${{ inputs.deploy-env }}
            type=${{ inputs.application-type }}          
